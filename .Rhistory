endride.uifun <- function(msgstr){
ui.msg <- dlg_message(msgstr, "ok")
}
ride.normal <- function(alabel = "ride: normal", msgperc,
framevector = fv.drive, ssint = 0.1, loops = 1){
grid.newpage()
c = 1
while(c <= loops){
for(f in framevector){
framewithlabel <- paste0(c(alabel, f, msgperc),
collapse = "\n")
grid.newpage()
grid.text(framewithlabel)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride.obstacle <- function(alabel = "ride: obstacle!", msgperc,
framevector1 = fv.drive,
framevector2 = fv.obstacle,
ssint = 0.5, loops = 2){
grid.newpage()
c = 1
while(c <= loops){
for(i in 1:length(framevector1)){
grid.newpage()
# print ride animation
fs <- framevector1[i]
frame1 <- paste0(c(alabel, fs, msgperc),
collapse = "\n")
grid.text(frame1)
# print obstacle animation
fo <- framevector2[i]
frame2 <- paste0(c(" ", fo),
collapse = "\n")
grid.text(frame2)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride <- function(ride.seq, o.seq,
bcond, tdist, onum){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
}
#---------------
# test main app
#---------------
ride(ride.seq, o.seq, bcond, tdist, onum)
ride <- function(ride.seq, o.seq,
bcond, tdist, onum){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0
ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- round(100*(c/length(ride.seq)), 3)
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
# tdist updates
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdnew,
", obstacles = ", onum + oride),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdnew,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride(ride.seq, o.seq, bcond, tdist, onum)
ride <- function(ride.seq, o.seq,
bcond, tdist, onum){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0
ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- round(100*(c/length(ride.seq)), 0)
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq), 1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
# tdist updates
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdnew,
", obstacles = ", onum + oride),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdnew,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride <- function(ride.seq, o.seq,
bcond, tdist, onum){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0
ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- round(100*(c/length(ride.seq)), 0)
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq), 1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
# tdist updates
tdnew <- tdist + c
onew <- onum + oride
msgstr <- paste0("the ride has ended!! \n",
"your current usr stats:\n",
"mileage = ", tdnew, "\n",
"obstacles = ", onew, "\n",
"bike.cond = ", bcond, "\n")
# update user stats
tdist = tdnew
onum = onew
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride(ride.seq, o.seq, bcond, tdist, onum)
library(svDialogs)
library(grid)
library(svDialogs)
library(grid)
# starting stats
tdist <- 0 # total mileage
onum <- 0 # obstacle number
bcond <- 0.5 # bike condition
mprob <- 0.5 # maintenance
rprob <- 0.5 # repair
bdi <- 0.1 # bcond change increment
rpm <- 1.5 # repair prob modifier to bdi
ride(ride.seq, o.seq, bcond, tdist, onum)
do_idle <- function(mprob, rprob){
itask <- dlg_message("maintain?", "yesno")$res
# parse idle task
if(itask == "yes"){
outcome <- get_task_outcome(mprob)
bcond.new = ifelse(outcome == "fix",
bcond + bdi,
bcond - bdi)
} else{
itask <- dlg_message("repair?", "yesno")$res
# parse repair task
if(itask == "yes"){
outcome <- get_task_outcome(mprob)
bcond.new <- ifelse(outcome == "fix",
bcond + bdi*rpm,
bcond - bdi*rpm)
}
}
return(bcond.new)
}
do_idle(mprob = 0.5, rprob = 0.5)
get_usrstats(tdist, onum, bcond, mprob, rprob, bdi, rpm){
if(round == 0){
tdist <- 0 # total mileage
onum <- 0 # obstacle number
bcond <- 0.5 # bike condition
mprob <- 0.5 # maintenance
rprob <- 0.5 # repair
bdi <- 0.1 # bcond change increment
rpm <- 1.5 # repair prob modifier to bdi
} else{
tdist <- tdist
onum <- onum
bcond <- bcond
mprob <- mprob
rprob <- rprob
bdi <- bdi
rpm <- rpm
}
lr <- list("tdist" = tdist,
"onum" = onum,
"bcond" = bcond,
"mprob" = mprob,
"rprob" = rprob,
"bdi" = bdi,
"rpm" = rpm)
return(lr)
}
rounds <- 0
ustats <- get_usrstats(tdist, onum, bcond, mprob, rprob, bdi, rpm){
if(round == 0){
tdist <- 0 # total mileage
onum <- 0 # obstacle number
bcond <- 0.5 # bike condition
mprob <- 0.5 # maintenance
rprob <- 0.5 # repair
bdi <- 0.1 # bcond change increment
rpm <- 1.5 # repair prob modifier to bdi
} else{
tdist <- tdist
onum <- onum
bcond <- bcond
mprob <- mprob
rprob <- rprob
bdi <- bdi
rpm <- rpm
}
lr <- list("tdist" = tdist,
"onum" = onum,
"bcond" = bcond,
"mprob" = mprob,
"rprob" = rprob,
"bdi" = bdi,
"rpm" = rpm)
return(lr)
}
do_idle(mprob = ustats[["mprob"]],
rprob = ustats[["rprob"]])
ustats[["bcond"]] <- do_idle()
?dlgMessage
dlg_input("enter")
a <- dlg_input("enter")
a
a
class(a)
as.character(a)
a[1]
a[[1]]
a$args
a$name
a$res
class(a$res)
bike <- function(msg = "customize your ride!", bike = "`=__%"){
bike <- dlg_input(msg, default = bike)
return(bike)
}
bike()
bike
asciibike <- function(msg = "customize your ride!", bike = "`=__%"){
bike <- dlg_input(msg, default = bike)
return(bike)
}
asciibike()
bike
bike
asciibike()
asciibike <- function(msg = "customize your ride!", bike = "`=__%"){
bike <- dlg_input(msg, default = bike)
return(bike)
}
asciibike()
bike
bike <- asciibike()
bike
asciibike <- function(msg = "customize your ride!", bike = "`=__%"){
bike <- dlg_input(msg, default = bike)$res
return(bike)
}
bike <- asciibike()
bike
ascii_blink_fv <- function(bike = "`=__%"){
stationary <- c("_______\n  ", bike," \n__0 0__")
blink <- c("_______\n       \n__   __")
fv <- c(stationary, blink)
return(fv)
}
ascii_drive_fv <- function(bike = "`=__%"){
drive1 <- c("     **\n ", bike, " \n__O o_-")
drive2 <- c("   ** *\n", bike, "  \n__o O__")
drive3 <- c("***     \n ", bike, " \n_-o o__")
drive4 <- c("       \n ", bike, " \n-_0 0__")
fv <- c(drive1, drive2, drive3, drive4)
return(fv)
}
fv.blink <- ascii_blink_fv()
fv.drive <- ascii_drive_fv()
fv.blink()
fv.blink
stationary <- c("_______\n  =__% \n__0 0__")
blink <- c("_______\n       \n__   __")
fv <- c(stationary, blink)
identical(fv.blink, fv)
fv
fv.blink
paste0(c("_______\n  ", bike," \n__0 0__"), collapse = "")
ascii_blink_fv <- function(bike = "`=__%"){
stationary <- paste0(c("_______\n  ", bike," \n__0 0__"), collapse = "")
blink <- "_______\n       \n__   __"
fv <- c(stationary, blink)
return(fv)
}
ascii_drive_fv <- function(bike = "`=__%"){
drive1 <- paste0("     **\n ", bike, " \n__O o_-", collapse = '')
drive2 <- paste0("   ** *\n", bike, "  \n__o O__", collapse = '')
drive3 <- paste0("***     \n ", bike, " \n_-o o__", collapse = '')
drive4 <- paste0("       \n ", bike, " \n-_0 0__", collapse = '')
fv <- c(drive1, drive2, drive3, drive4)
return(fv)
}
ascii_blink_fv()
fv.blink <- ascii_blink_fv()
identical(fv.blink, fv)
fv
length(fv)
fv[1]
f[1]
fv[1]
fv.blink[1]
asciibike <- function(msg = "customize your ride!", bike = "`=__%"){
bike <- dlg_input(msg, default = bike)$res
return(bike)
}
bike <- asciibike()
ascii_blink_fv <- function(bike = "`=__%"){
stationary <- paste0(c("_______\n  ", bike," \n__0 0__"), collapse = "")
blink <- "_______\n       \n__   __"
fv <- c(stationary, blink)
return(fv)
}
fv.blink <- ascii_blink_fv()
# 1B2. drive
ascii_drive_fv <- function(bike = "`=__%"){
drive1 <- paste0("     **\n ", bike, " \n__O o_-", collapse = '')
drive2 <- paste0("   ** *\n", bike, "  \n__o O__", collapse = '')
drive3 <- paste0("***     \n ", bike, " \n_-o o__", collapse = '')
drive4 <- paste0("       \n ", bike, " \n-_0 0__", collapse = '')
fv <- c(drive1, drive2, drive3, drive4)
return(fv)
}
fv.drive <- ascii_drive_fv()
ascii_obstacle_fv <- function(osym = "#"){
# osym <- "#"
otop <- paste0(rep(" ", 7), collapse = "")
omid <- paste0(rep(" ", 7), collapse = "")
o1 <- paste0(c(otop, omid, c("      ", osym)), collapse = "\n")
o2 <- paste0(c(otop, omid, c("    ", osym, " ")), collapse = "\n")
o3 <- paste0(c(otop, omid, c("     ", osym, " ")), collapse = "\n")
o4 <- paste0(c(otop, omid, c("    ", osym, "  ")), collapse = "\n")
fv <- c(o1, o2, o3, o4)
return(fv)
}
ascii_obstacle_fv()
ascii_fvl <- function(fv.drive, fv.idle, fv.obstacle){
fvl <- list("idle" = fv.idle,
"drive" = fv.drive,
"obstacle" = fv.obstacle)
return(fvl)
}
ascii_fvl()
ascii_fvl <- function(fv.drive, fv.idle, fv.obstacle){
fvl <- list("idle" = fv.idle,
"drive" = fv.drive,
"obstacle" = fv.obstacle)
return(fvl)
}
ascii_obstacle_fv <- function(osym = "#"){
# osym <- "#"
otop <- paste0(rep(" ", 7), collapse = "")
omid <- paste0(rep(" ", 7), collapse = "")
o1 <- paste0(c(otop, omid, c("      ", osym)), collapse = "\n")
o2 <- paste0(c(otop, omid, c("    ", osym, " ")), collapse = "\n")
o3 <- paste0(c(otop, omid, c("     ", osym, " ")), collapse = "\n")
o4 <- paste0(c(otop, omid, c("    ", osym, "  ")), collapse = "\n")
fv <- c(o1, o2, o3, o4)
return(fv)
}
fv.obstacle <- ascii_obstacle_fv()
ascii_fvl <- function(drive, idle, obstacle){
fvl <- list("idle" = idle,
"drive" = drive,
"obstacle" = obstacle)
return(fvl)
}
fvl <- ascii_fvl(fv.drive, fv.idle, fv.obstacle)
ascii_idle_fv <- function(bike = "`=__%"){
stationary <- paste0(c("_______\n  ", bike," \n__0 0__"), collapse = "")
blink <- "_______\n       \n__   __"
fv <- c(stationary, blink)
return(fv)
}
fv.idle <- ascii_idle_fv()
ascii_fvl <- function(drive, idle, obstacle){
fvl <- list("idle" = idle,
"drive" = drive,
"obstacle" = obstacle)
return(fvl)
}
fvl <- ascii_fvl(fv.drive, fv.idle, fv.obstacle)
fvl[[1]]
fvl[[2]]
fvl[[3]]
