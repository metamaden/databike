while(c <= loops){
for(i in 1:length(framevector1)){
grid.newpage()
# print ride animation
fs <- framevector1[i]
frame1 <- paste0(c(alabel, fs, msgperc),
collapse = "\n")
grid.text(frame1)
# print obstacle animation
fo <- framevector2[i]
frame2 <- paste0(c(" ", fo),
collapse = "\n")
grid.text(frame2)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride <- function(ride.seq, o.seq, bc,
tdist, onum, bcond){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride(ride.seq, o.seq)
stationary <- c("_______\n  =__% \n__0 0__")
blink <- c("_______\n       \n__   __")
fv.idle <- c(stationary, blink)
drive1 <- c("     **\n `=__% \n__O o_-")
drive2 <- c("   ** *\n`=__%  \n__o O__")
drive3 <- c("***     \n `=__% \n_-o o__")
drive4 <- c("       \n `=__% \n-_0 0__")
fv.drive <- c(drive1, drive2, drive3, drive4)
osym <- "#"
otop <- paste0(rep(" ", 7), collapse = "")
omid <- paste0(rep(" ", 7), collapse = "")
o1 <- paste0(c(otop, omid, c("      ", osym)), collapse = "\n")
o2 <- paste0(c(otop, omid, c("    ", osym, " ")), collapse = "\n")
o3 <- paste0(c(otop, omid, c("     ", osym, " ")), collapse = "\n")
o4 <- paste0(c(otop, omid, c("    ", osym, "  ")), collapse = "\n")
fv.obstacle <- c(o1, o2, o3, o4)
obstacle.uifun <- function(){
ui.msg <- dlg_message("cancel ride?", "yesno")$res
return(ifelse(ui.msg == "yes", 0, 1))
}
endride.uifun <- function(msgstr){
ui.msg <- dlg_message(msgstr, "ok")
}
ride.normal <- function(alabel = "ride: normal", msgperc,
framevector = fv.drive, ssint = 0.1, loops = 1){
grid.newpage()
c = 1
while(c <= loops){
for(f in framevector){
framewithlabel <- paste0(c(alabel, f, msgperc),
collapse = "\n")
grid.newpage()
grid.text(framewithlabel)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride.obstacle <- function(alabel = "ride: obstacle!", msgperc,
framevector1 = fv.drive,
framevector2 = fv.obstacle,
ssint = 0.5, loops = 2){
grid.newpage()
c = 1
while(c <= loops){
for(i in 1:length(framevector1)){
grid.newpage()
# print ride animation
fs <- framevector1[i]
frame1 <- paste0(c(alabel, fs, msgperc),
collapse = "\n")
grid.text(frame1)
# print obstacle animation
fo <- framevector2[i]
frame2 <- paste0(c(" ", fo),
collapse = "\n")
grid.text(frame2)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride <- function(ride.seq, o.seq, bc,
tdist, onum, bcond){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride(ride.seq, o.seq)
tdist <- 0 # total mileage
onum <- 0 # obstacle number
bcond <- 0.5 # bike condition
mprob <- 0.5 # maintenance
rprob <- 0.5 # repair
bdi <- 0.1 # bcond change increment
rpm <- 1.5 # repair prob modifier to bdi
{
get_rideseq <- function(ride.options = c("short", "medium", "long")){
# randomize ride len
rand.ridedur <- sample(ride.options, 1)
# offer ride
ui.msg <- dlg_message(paste0("Offer for a ride of ",
rand.ridedur," duration. ",
"Accept ride offer?"),
"yesno")$res
ui.ridedur <- ifelse(ui.msg == "yes", rand.ridedur, "NA")
# return ride.seq
ride.seq <- get_rideseq(ui.ridedur)
return(ride.seq)
}
# get obstacle data
get_oseq <- function(ride.seq, max.o = 10){
o.num <- sample(max.o, 1)
o.seq <- sample(ride.seq, o.num)
return(o.seq)
}
# ridseq
rt <- "short" # short, medium, long
ride.type <- rt
ride.dur <- ifelse(rt == "short", 30,
ifelse(rt == "medium", 50,
ifelse(rt == "long", 100, "NA")))
ride.seq <- seq(1, ride.dur, 1)
# oseq
stationary <- c("_______\n  =__% \n__0 0__")
blink <- c("_______\n       \n__   __")
fv.idle <- c(stationary, blink)
drive1 <- c("     **\n `=__% \n__O o_-")
drive2 <- c("   ** *\n`=__%  \n__o O__")
drive3 <- c("***     \n `=__% \n_-o o__")
drive4 <- c("       \n `=__% \n-_0 0__")
fv.drive <- c(drive1, drive2, drive3, drive4)
osym <- "#"
otop <- paste0(rep(" ", 7), collapse = "")
omid <- paste0(rep(" ", 7), collapse = "")
o1 <- paste0(c(otop, omid, c("      ", osym)), collapse = "\n")
o2 <- paste0(c(otop, omid, c("    ", osym, " ")), collapse = "\n")
o3 <- paste0(c(otop, omid, c("     ", osym, " ")), collapse = "\n")
o4 <- paste0(c(otop, omid, c("    ", osym, "  ")), collapse = "\n")
fv.obstacle <- c(o1, o2, o3, o4)
obstacle.uifun <- function(){
ui.msg <- dlg_message("cancel ride?", "yesno")$res
return(ifelse(ui.msg == "yes", 0, 1))
}
endride.uifun <- function(msgstr){
ui.msg <- dlg_message(msgstr, "ok")
}
ride.normal <- function(alabel = "ride: normal", msgperc,
framevector = fv.drive, ssint = 0.1, loops = 1){
grid.newpage()
c = 1
while(c <= loops){
for(f in framevector){
framewithlabel <- paste0(c(alabel, f, msgperc),
collapse = "\n")
grid.newpage()
grid.text(framewithlabel)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride.obstacle <- function(alabel = "ride: obstacle!", msgperc,
framevector1 = fv.drive,
framevector2 = fv.obstacle,
ssint = 0.5, loops = 2){
grid.newpage()
c = 1
while(c <= loops){
for(i in 1:length(framevector1)){
grid.newpage()
# print ride animation
fs <- framevector1[i]
frame1 <- paste0(c(alabel, fs, msgperc),
collapse = "\n")
grid.text(frame1)
# print obstacle animation
fo <- framevector2[i]
frame2 <- paste0(c(" ", fo),
collapse = "\n")
grid.text(frame2)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride <- function(ride.seq, o.seq, bc,
tdist, onum, bcond){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
}
ride(ride.seq, o.seq)
tdist
ride <- function(ride.seq, o.seq, bcond,
tdist, onum, bcond){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride <- function(ride.seq, o.seq,
bcond, tdist, onum){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride(ride.seq, o.seq, bcond, tdist, onum)
setwd("~/GitHub/scootsim")
require(svDialogs)
require(grid)
# app.R
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste0(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste0(c(dn, "uscorestart.RData"),
collapse = "/")
path.functions
path.userscorestart
load(path.userscorestart) # load.uscorestart()
load(path.functions)
path.functions
path.functions <- paste0(c(dn, "functions.RData"),
sep = "/")
path.userscorestart <- paste0(c(dn, "uscorestart.RData"),
sep = "/")
path.functions
paste(c(dn, "functions.RData"),
collapse = "/")
require(svDialogs)
require(grid)
# app.R
# runs `databike`
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste(c(dn, "uscorestart.RData"),
collapse = "/")
# load(path.data) # load.data()
load(path.userscorestart) # load.uscorestart()
load(path.functions) # load.functions()
fv.idle <- ascii_idle_fv()
fv.drive <- ascii_drive_fv()
fv.obstacle <- ascii_obstacle_fv()
fvl <- ascii_fvl(fv.drive,
fv.idle,
fv.obstacle)
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste(c(dn, "uscorestart.RData"),
collapse = "/")
# load(path.data) # load.data()
load(path.userscorestart) # load.uscorestart()
load(path.functions) # load.functions()
#log_errors()
paste(c(dn, "uscorestart.RData"),
collapse = "/")
paste(c(dn, "functions.RData"),
collapse = "/")
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste(c(dn, "uscorestart.RData"),
collapse = "/")
path.functions
path.userscorestart
load(path.userscorestart)
load(path.functions)
paste(c(dn, "functions.RData"),
collapse = "/")
paste(c(dn, "uscorestart.RData"),
collapse = "/")
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste(c(dn, "uscorestart.RData"),
collapse = "/")
# load(path.data) # load.data()
load(path.userscorestart) # load.uscorestart()
load(path.functions) # load.functions()
#log_errors()
