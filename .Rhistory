return(cond)
})
rep3 <- tryCatch(read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep4 <- tryCatch(read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep5 <- tryCatch(read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep6 <- tryCatch(read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep1
rep2
rep3
rep4
rep5
file.remove('my_h5_se/assays.h5')
read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2))
# read.metharray2 function from https://github.com/hansenlab/minfi/blob/master/R/read.meth2.R
load("read_metharray2.rda")
require(minfi)
require(minfiData)
require(DelayedArray)
require(HDF5Array)
require(illuminaio)
baseDir <- system.file("extdata", package = "minfiData")
targets <- read.metharray.sheet(baseDir)
dir.create("my_h5_se")
file.remove('my_h5_se/assays.h5')
rep1 <- tryCatch(read.metharray2(targets$Basename, nArrays=1, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep2 <- tryCatch(read.metharray2(targets$Basename, nArrays=2, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep3 <- tryCatch(read.metharray2(targets$Basename, nArrays=3, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep4 <- tryCatch(read.metharray2(targets$Basename, nArrays=4, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep5 <- tryCatch(read.metharray2(targets$Basename, nArrays=5, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
file.remove('my_h5_se/assays.h5')
rep6 <- tryCatch(read.metharray2(targets$Basename, nArrays=6, BPPARAM = MulticoreParam(2)),
error=function(cond){
message("error...")
return(cond)
},
warning=function(cond){
message("warning...")
return(cond)
})
rep1
rep2
rep3
rep4
rep6
dim(rep6)
dim(rep5)
rep5
sessionInfo()
library(rols)
termLabel("uberon", "UBERON:0002107")
termLabel(term("uberon", "UBERON:0002107"))
termLabel(term("uberon", "UBERON:0002107"))
?permutations
install.packages('gtools')
library(gtools)
?permutations
dattypes <- c("sra_stemcells", "sra_developmental", "sra_adult", "paired", "gtex")
permutations(n=length(dattypes), r=length(dattypes), v=dattypes, repeats.allowed = F)
pd <- permutations(n=length(dattypes), r=length(dattypes), v=dattypes, repeats.allowed = F)
head(pd)
pd <- permutations(n=2, r=5, v=c(0,1))
pd <- permutations(n=5, r=5, v=c(0,1))
?bitwOr
library(GEOmetadb)
citation("GEOmetadb")
which(minfi)
R.Version()
load("/Users/maden/scratch/consensusML/cml_share/borutadat_1.rda")
x <- bdat$ImpHistory
x
dim(x)
rownames(x)
x[1,1]
x[1,2]
x[2,1]
bdat$impSource
bdat$finalDecision
table(bdat$finalDecision)
bdat$light
bdat$maxRuns
bdat$mcAdj
bdat$roughfixed
bdat$call
bdat$ImpHistory
hist(x[,1])
hist(x[,2])
hist(x[,3])
table(bdat$finalDecision)
names(bdat$finalDecision[bdat$finalDecision=="Confirmed"])
cid <- names(bdat$finalDecision[bdat$finalDecision=="Confirmed"])
cid
hist(x[,cid[1]])
hist(x[,cid[2]])
hist(x[,cid[3]])
hist(x[,cid[4]])
hist(x[,cid[5]])
summary(x[,cid[1]])
summary(x[,cid[2]])
x[,cid[1]]
x[,cid[2]]
bdat$pValue
bdat$finalDecision
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-gsm_md-decision-list.rda")
lx <- gsm.anno.decision.list
lx$GSM2334191
load("~/scratch/analysis_scratch/analysis_final_files/rs33k-gsmjsonfilt.rda")
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-manualanno-termfreqdflist.rda")
rmanno.list$age_dfs$age
head(rmanno.list$age_dfs$age)
rmanno.list$age_dfs$age[c(1:50),]
load("~/scratch/analysis_scratch/analysis_final_files/recountmeth-gsm-metadata_naive-summary.rda")
head(rmsd)
head(rmsmd)
?pca
?princomp
library(randomForest)
?randomFOrest
?randomForest
?fread
library(data.table)
?fread
?read.table
?scar
?scan
?readLines
library(ComplexHeatmap)
m = matrix(rnorm(50*10), nrow = 50)
ht_list = Heatmap(m, name = "main_matrix")
ha = HeatmapAnnotation(summary = anno_summary(height = unit(3, "cm")))
v = sample(letters[1:2], 50, replace = TRUE)
ht_list = ht_list + Heatmap(v, name = "mat1", top_annotation = ha, width = unit(1, "cm"))
ha = HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2:3),
height = unit(3, "cm")))
v = rnorm(50)
ht_list = ht_list + Heatmap(v, name = "mat2", top_annotation = ha, width = unit(1, "cm"))
split = sample(letters[1:2], 50, replace = TRUE)
lgd_boxplot = Legend(labels = c("group a", "group b"), title = "group",
legend_gp = gpar(fill = c("red", "blue")))
draw(ht_list, row_split = split, ht_gap = unit(5, "mm"),
heatmap_legend_list = list(lgd_boxplot))
split
split = c("a", rep("b", 49))
lgd_boxplot = Legend(labels = c("group a", "group b"), title = "group",
legend_gp = gpar(fill = c("red", "blue")))
draw(ht_list, row_split = split, ht_gap = unit(5, "mm"),
heatmap_legend_list = list(lgd_boxplot))
?split
?draw
subgroup = sample(letters[1:3], 100, replace = TRUE, prob = c(1, 5, 10))
subgroup
draw(ht_list, row_split = split,
heatmap_legend_list = list(lgd_boxplot))
split = c("b", rep("a", 49))
lgd_boxplot = Legend(labels = c("group a", "group b"), title = "group",
legend_gp = gpar(fill = c("red", "blue")))
draw(ht_list, row_split = split,
heatmap_legend_list = list(lgd_boxplot))
split = c("1", rep("2", 49))
lgd_boxplot = Legend(labels = c("group a", "group b"), title = "group",
legend_gp = gpar(fill = c("red", "blue")))
draw(ht_list, row_split = split,
heatmap_legend_list = list(lgd_boxplot))
library(minfiData)
data("RGsetEx")
rg = RGsetEx
dim(rg)
getSnpBeta(rg)
dim(getSnpBeta(rg))
dim(t(getSnpBeta(rg)))
dim(getOOB(rg))
oob = getOOB(rg)
oog
oob
oob$Grn
dim(oob$Grn)
dim(oob$Red)
estimateCellCounts(rgi)
estimateCellCounts(rg)
rgi = rg
cc1 = estimateCellCounts(rgi, compositeCellType = "Blood")
cc2 = estimateCellCounts(rgi, compositeCellType = "CordBlood")
BiocManager::install("FlowSorted.CordBlood.450k")
BiocManager::install("FlowSorted.DLPFC.450k")
dim(rg)
cc1 = estimateCellCounts(rgi, compositeCellType = "Blood")
cc2 = estimateCellCounts(rgi, compositeCellType = "CordBlood")
cc3 = estimateCellCounts(rgi, compositeCellType = "DLPFC")
?estimateCellCounts
cc2
cc1
class(cc1)
load("~/Desktop/nctissue_bcdat_new/cgid-hypovar10.rda")
load("~/Desktop/nctissue_bcdat_new/cgid-hypervar90.rda")
load("~/Desktop/nctissue_bcdat_new/cgid-hypovar10.rda")
hypo = ptid
load("~/Desktop/nctissue_bcdat_new/cgid-hypervar90.rda")
?prcomp
load("~/Desktop/nctissue_bcdat_old/hm450k_cganno.rda")
dim(cga)
library(ewastools)
?ewastools
??ewastools
library(glmnet)
?glmnet
(480000/90000)*1.33
load("~/Documents/GitHub/recount-methylation-analysis/files/data/mdpost_all-gsm-md.rda")
mdf = mdpost[!(grepl(".*cancer.*", mdpost$disease)|
grepl(".*cancer.*", mdpost$tissue)),]
dx = as.data.frame(table(mdf$gseid))
dx = dx[rev(order(dx[,2])),]
dx[c(1:5),]
gsev = dx[c(1:5), 1]
gsev
gsev = as.charcter(dx[c(1:5), 1])
gsev = as.character(dx[c(1:5), 1])
gsev[1]
gsei = gsev[1]
gsei = gsev[2]
gsei
gsei = gsev[3]
gsei
((480000/10)*12)/60
((480000/10000)*12)/60
gsei = gsev[4]
gsei
gsev
gsev[5]
dx = as.data.frame(table(mdf$gseid))
dx = dx[rev(order(dx[,2])),]
gsev = as.character(dx[c(1:10), 1])
gsev[6]
gsei = gsev[7]
gsei
gsei = gsev[8]
gsei
gsei = gsev[9]
gsei
gsei = gsev[10]
gsei
mf = mdpost[mdpost$gseid=="GSE69502",]
head(mf)
36000/1.2
((36000/50)*1.2)/60
((36000/350)*6.5)/60
((36000/850)*17.7)/60
((36000/850)*17.6)/60
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install("MyPackage")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install("recountmethylation")
library(Rcpp)
require(devtools); install_github("metamaden/recountmethylation")
library(recountmethylation)
library(recountmethylation)
require(devtools); install_github("metamaden/recountmethylation")
library(recountmethylation)
require(devtools); install_github("metamaden/recountmethylation", force = T)
library(recountmethylation)
library(recountmethylation)
require(devtools); install_github("metamaden/recountmethylation")
library(recountmethylation)
library(glmnet)
?glmnet
((6*50)*6.7)/60
library(svDialogs)
?dlg_message
ui.idle <- dlg_message("maintain?", "yesno")$res
setwd("~/Desktop/recountmethylation/recount.bio/data")
lfl <- list.files()
HDF5Array::loadHDF5SummarizedExperiment(lfl[1])
lfl <- lfl[grepl(".*h5se.*", lfl)]
lfl
HDF5Array::loadHDF5SummarizedExperiment(lfl[1])
BiocManager::install(version = "devel")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version = "devel")
library(HDF5Array)
BiocManager::install(c("minfi", "HDF5Array", "SummarizedExperiment"))
BiocManager::install(c("minfi", "HDF5Array", "SummarizedExperiment"))
library(HDF5Array)
BiocManager::install(version = "devel")
R.Version()
BiocManager::valid()
BiocManager::install("BiocCheck")
library(testthat)
?is_a
install.packages("dplyr")
?read_html
require(textreadr)
install.packages("textreadr")
require(rvest)
require(rworldmap)
require(dplyr) # for pipes
require(textreadr) # for read_html
alleles.outfile <- "HLA-freqs.rda"
iso3.outfile <- "HLA-ISO3-freqs.rda"
global.outfile <- "HLA-freqs-global.rda"
global.haplotype.outfile <- "haplotype-freqs-global.rda"
individuals.outfile <- "HLA-individuals.rda"
haplotypes.outfile <- "HLA-haplotypes.rda"
haplotype.iso3.outfile <- "haplotype-ISO3-freqs.rda"
MHC.alleles.infile <- "supporting_data/netmhcpan_allele_list.txt"
plotdir <- "plots"
require(rvest)
require(rworldmap)
require(dplyr) # for pipes
require(textreadr) # for read_html
install.packages("rworld")
install.packages("rworldmap")
require(rvest)
require(rworldmap)
require(dplyr) # for pipes
require(textreadr) # for read_html
alleles.outfile <- "HLA-freqs.rda"
iso3.outfile <- "HLA-ISO3-freqs.rda"
global.outfile <- "HLA-freqs-global.rda"
global.haplotype.outfile <- "haplotype-freqs-global.rda"
individuals.outfile <- "HLA-individuals.rda"
haplotypes.outfile <- "HLA-haplotypes.rda"
haplotype.iso3.outfile <- "haplotype-ISO3-freqs.rda"
MHC.alleles.infile <- "supporting_data/netmhcpan_allele_list.txt"
plotdir <- "plots"
alleles <- data.frame(HLA=character(), pop.ID=numeric(), pop.name=character(), freq=numeric(), sample.size=numeric())
?read_html
require(rvest)
require(rworldmap)
require(dplyr) # for pipes
#require(textreadr) # for read_html
alleles.outfile <- "HLA-freqs.rda"
iso3.outfile <- "HLA-ISO3-freqs.rda"
global.outfile <- "HLA-freqs-global.rda"
global.haplotype.outfile <- "haplotype-freqs-global.rda"
individuals.outfile <- "HLA-individuals.rda"
haplotypes.outfile <- "HLA-haplotypes.rda"
haplotype.iso3.outfile <- "haplotype-ISO3-freqs.rda"
MHC.alleles.infile <- "supporting_data/netmhcpan_allele_list.txt"
plotdir <- "plots"
alleles <- data.frame(HLA=character(), pop.ID=numeric(),
pop.name=character(), freq=numeric(),
sample.size=numeric())
library(grid)
seq(1,20,1)
setwd("~/Documents/GitHub/databike")
require(svDialogs) # manages usr dialogues
require(grid) # prints char strings for ani
require(jpeg) # for loading databike logo
# require(here) # gets path
rdata.dir <- "."
dn <- "R"
fn.fun <- "functions"
fn.params <- "params"
fp.fun <- paste0(c(dn, paste0(fn.fun, ".R")),
collapse = "/")
fn.params <- paste0(c(dn, paste0(fn.params, ".R")),
collapse = "/")
#source(here(fp.fun))
#source(here(fn.params))
source(fp.fun)
source(fn.params)
#-----------------
# ani char strings
#-----------------
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
setwd("~/Documents/GitHub/databike")
install.packages("jpeg")
require(svDialogs) # manages usr dialogues
require(grid) # prints char strings for ani
require(jpeg) # for loading databike logo
# require(here) # gets path
install.packages("svDialogs")
require(svDialogs) # manages usr dialogues
require(grid) # prints char strings for ani
require(jpeg) # for loading databike logo
# require(here) # gets path
rdata.dir <- "."
dn <- "R"
fn.fun <- "functions"
fn.params <- "params"
fp.fun <- paste0(c(dn, paste0(fn.fun, ".R")),
collapse = "/")
fn.params <- paste0(c(dn, paste0(fn.params, ".R")),
collapse = "/")
source(fp.fun)
source(fn.params)
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
#!/usr/bin/env R
# Main app script, to be run from command line
#-------------
# dependencies
#-------------
require(svDialogs) # manages usr dialogues
require(grid) # prints char strings for ani
require(jpeg) # for loading databike logo
# require(here) # gets path
rdata.dir <- "."
dn <- "R"
fn.fun <- "functions"
fn.params <- "params"
fp.fun <- paste0(c(dn, paste0(fn.fun, ".R")),
collapse = "/")
fn.params <- paste0(c(dn, paste0(fn.params, ".R")),
collapse = "/")
#source(here(fp.fun))
#source(here(fn.params))
source(fp.fun)
source(fn.params)
#-----------------
# ani char strings
#-----------------
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
#--------------
# main app loop
#--------------
stopoption <- "no"
# first ride
su.ride <- app.fun(fv.idle = fv.idle, logo = logo.jpg, # data for ani
minobst = minobst, onum = onum, nride = 1,
tdist = tdist, verbose = TRUE) # usr stats
