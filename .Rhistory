ride.normal <- function(alabel = "ride: normal", msgperc,
framevector = fv.drive, ssint = 0.1, loops = 1){
grid.newpage()
c = 1
while(c <= loops){
for(f in framevector){
framewithlabel <- paste0(c(alabel, f, msgperc),
collapse = "\n")
grid.newpage()
grid.text(framewithlabel)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride.obstacle <- function(alabel = "ride: obstacle!", msgperc,
framevector1 = fv.drive,
framevector2 = fv.obstacle,
ssint = 0.5, loops = 2){
grid.newpage()
c = 1
while(c <= loops){
for(i in 1:length(framevector1)){
grid.newpage()
# print ride animation
fs <- framevector1[i]
frame1 <- paste0(c(alabel, fs, msgperc),
collapse = "\n")
grid.text(frame1)
# print obstacle animation
fo <- framevector2[i]
frame2 <- paste0(c(" ", fo),
collapse = "\n")
grid.text(frame2)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride <- function(ride.seq, o.seq, bc,
tdist, onum, bcond){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
}
ride(ride.seq, o.seq)
tdist
ride <- function(ride.seq, o.seq, bcond,
tdist, onum, bcond){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride <- function(ride.seq, o.seq,
bcond, tdist, onum){
# global stats
# tdist # global mileage
# onum # global obstacle count
# bcond # bike condition
require(grid)
# add bike condition stuff
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
oride <- 0
# bcchange <- bc # bike condition
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
""),
paste0(msgstr,
" the ride has ended!! \n",
"mileage = ", tdist + c,
"obstacles = ", onum + oride)
)
# get running stats
lr <- list("tot.dist",
"tot.obstacles",
"bike.condition")
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
return(bc)
}
ride(ride.seq, o.seq, bcond, tdist, onum)
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste(c(dn, "uscorestart.RData"),
collapse = "/")
# load(path.data) # load.data()
load(path.userscorestart) # load.uscorestart()
load(path.functions) # load.functions()
#log_errors()
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste(c(dn, "usercorestart.RData"),
collapse = "/")
load(path.userscorestart) # load.uscorestart()
load(path.functions) # load.functions()
#log_errors()
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste(c(dn, "userscorestart.RData"),
collapse = "/")
# load(path.data) # load.data()
load(path.userscorestart) # load.uscorestart()
load(path.functions) # load.functions()
#log_errors()
path.functions
path.userscorestart
path.userscorestart
path.functions
require(svDialogs)
require(grid)
# app.R
# runs `databike`
dn <- "data"
#path.data <- paste0(dn, "data.RData", collapse = "/")
path.functions <- paste(c(dn, "functions.RData"),
collapse = "/")
path.userscorestart <- paste(c(dn, "userscorestart.RData"),
collapse = "/")
# load(path.data) # load.data()
load(path.userscorestart) # load.uscorestart()
load(path.functions) # load.functions()
#log_errors()
#!/usr/bin/env R
require(svDialogs)
require(grid)
require(jpeg)
# app.R
# Main code for `databike` app.
# external dependencies
fp.org <- "./org.R"
source(fp.org)
# bike ascii frames
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
stopoption <- "no"
logo <- readJPEG("databike_logo.jpg")
while(bcond > 0 & stopoption == "no"){
do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
# retrieve ride duration
rt <- sample(optl, 1)
ride.dur <- get_ride.dur(rt, ru)
# new ride sequence data
ride.seq <- seq(1, ride.dur, 1)
n.obstacles <- sample(10, 1)
o.seq <- sample(ride.seq, n.obstacles)
# run ride
ride(ride.seq, ride.dur,
o.seq, bcond, tdist, onum)
# option to quit
stopoption <- dlg_message("Do you want to stop the game?",
"yesno")$res
}
# end game message
dlg_message(paste0("Game over!", " mileage = ", tdist,
", obstacles = ", onum), "ok")
install.packages("jpeg")
require(svDialogs)
require(grid)
require(jpeg)
# external dependencies
fp.org <- "./org.R"
source(fp.org)
# bike ascii frames
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
stopoption <- "no"
logo <- readJPEG("databike_logo.jpg")
# external dependencies
fp.org <- "./org.R"
source(fp.org)
setwd("~/GitHub/databike")
# external dependencies
fp.org <- "./org.R"
source(fp.org)
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
stopoption <- "no"
logo <- readJPEG("databike_logo.jpg")
do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bcond
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
stopoption <- "no"
logo <- readJPEG("databike_logo.jpg")
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
?break
do_idle <- function(framevector, logo,
mprob, rprob, bcond, ssint = 1,
alabel = "stats: idle"){
grid.newpage()
grid.raster(logo, width = 0.35, height = 0.25,
hjust = -0.2, vjust = 1.7)
framewithlabel <- paste0(c(alabel, framevector[1]),
collapse = "\n")
grid.text(framewithlabel)
Sys.sleep(ssint)
# add logo
idlechoice <- 0
while(idlechoice == 0){
itask <- dlg_message("maintain?",
"yesno")$res
# parse maintenance task
if(itask == "yes"){
outcome <- get_task_outcome(mprob, bcond)
bcond = ifelse(outcome == "fix",
bcond + bdi,
bcond - bdi)
break
} else{
itask <- dlg_message("repair?", "yesno")$res
# parse repair task
if(itask == "yes"){
outcome <- get_task_outcome(rprob, bcond)
bcond <- ifelse(outcome == "fix",
bcond + bdi*rpm,
bcond - bdi*rpm)
idlechoice <- 1
break
}
else{
return(bcond)
}
}
idlechoice <- 1
break
}
return(bcond)
}
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bcond
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
bcond
library(svDialogs)
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
fp.org <- "./org.R"
source(fp.org)
# bike ascii frames
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
stopoption <- "no"
logo <- readJPEG("databike_logo.jpg")
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
#!/usr/bin/env R
require(svDialogs)
require(grid)
require(jpeg)
# app.R
# Main code for `databike` app.
# external dependencies
fp.org <- "./org.R"
source(fp.org)
# bike ascii frames
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
stopoption <- "no"
logo <- readJPEG("databike_logo.jpg")
while(bcond > 0 & stopoption == "no"){
bcond <- do_idle(framevector = fv.idle, logo = logo,
mprob, rprob, bcond)
# retrieve ride duration
rt <- sample(optl, 1)
ride.dur <- get_ride.dur(rt, ru)
# new ride sequence data
ride.seq <- seq(1, ride.dur, 1)
n.obstacles <- sample(10, 1)
o.seq <- sample(ride.seq, n.obstacles)
# run ride
ride(ride.seq, ride.dur,
o.seq, bcond, tdist, onum)
# option to quit
stopoption <- dlg_message("Do you want to stop the game?",
"yesno")$res
}
# end game message
dlg_message(paste0("Game over!", " mileage = ", tdist,
", obstacles = ", onum), "ok")
ride(ride.seq, ride.dur,
o.seq, bcond, tdist, onum)
ride.seq
ride.dur
o.seq
bcond
tdis
tdisr
tdist
onum
require(grid)
# message ride duration
rd.message <- paste0("Beginning ride of ", rt,
" duration!")
dlg_message(rd.message, "ok")
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0; oride <- 0
perc.finished <- round(100*(c/length(ride.seq)), 0)
msgperc <- paste0("ride progress = ", perc.finished, "%\n",
"mileage = ", tdist)
ride.finished <- ifelse(c == max(ride.seq), 1, 0)
ride.seq
c = ride.seq[1]
perc.finished <- round(100*(c/length(ride.seq)), 0)
msgperc <- paste0("ride progress = ", perc.finished, "%\n",
"mileage = ", tdist)
nride = 0
nride += 1
#!/usr/bin/env R
# Main app script, to be run from command line
#-------------
# dependencies
#-------------
require(svDialogs) # manages usr dialogues
require(grid) # prints char strings for ani
require(jpeg) # for loading databike logo
rdata.dir <- "."
dn <- "data"
fn.fun <- "functions"
fn.params <- "params"
fp.fun <- paste0(c(dn, paste0(fn.fun, ".R")),
collapse = "/")
fn.params <- paste0(c(dn, paste0(fn.params, ".R")),
collapse = "/")
source(fp.fun); source(fn.params)
#-----------------
# ani char strings
#-----------------
bike <- asciibike()
fv.idle <- ascii_idle_fv(bike)
fv.drive <- ascii_drive_fv(bike)
fv.obstacle <- ascii_obstacle_fv()
fvl <- list("drive" = fv.drive,
"idle" = fv.idle)
#---------------
# main app loop
#---------------
while(bcond > 0 & stopoption == "no"){
su.ride <- app.fun(fv.idle, logo, mprob,
rprob, bcond, nobst)
stopoption <- su.ride[["stopoption"]]
bcond <- su.ride[["su.ride"]][["bcond"]]
nobst <- su.ride[["su.ride"]][["onum"]]
tdist <- su.ride[["su.ride"]][["tdist"]]
nride = nride + 1
}
#------------------
# end-of-game stuff
#------------------
dlg_message(paste0("Game over!", " mileage = ",
tdist, ", obstacles = ",
onum, ", num. rides = ",
nride), "ok")
