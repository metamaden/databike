msgstr <- ifelse(ride.finished == 1,
paste0(msgstr, " you completed the ride."),
paste0(msgstr, " you canceled your ride."))
endride.uifun(msgstr)
return(NULL)
}
}
}
}
endride.uifun <- function(msgstr){
ui.msg <- dlg_message(msgstr, "ok")
}
ride()
ride(ride.seq)
ride.seq
ride <- function(ride.seq, o.seq){
grid.newpage()
ride.finished <- 0
ride.status <- 1
while(ride.status > 1){
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle()
ride.status <- obstacle.uifun()
} else{
ride.normal()
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr, " you completed the ride."),
paste0(msgstr, " you canceled your ride."))
endride.uifun(msgstr)
return(NULL)
}
}
}
}
ride()
ride(ride.seq, o.seq)
ride.seq
o.seq
grid.newpage()
ride.finished <- 0
ride.status <- 1
grid.newpage()
ride.finished <- 0
ride.status <- 1
while(ride.status > 1){
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle()
ride.status <- obstacle.uifun()
} else{
ride.normal()
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr, " you completed the ride."),
paste0(msgstr, " you canceled your ride."))
endride.uifun(msgstr)
return(NULL)
}
}
}
ride.obstacle()
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(loops = 2)
ride.status <- obstacle.uifun()
} else{
ride.normal(loops = 1)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr, " you completed the ride."),
paste0(msgstr, " you canceled your ride."))
endride.uifun(msgstr)
return(NULL)
}
}
o.seq
obstacle.uifun <- function(){
ui.msg <- dlg_message("cancel ride?", "yesno")$res
return(ifelse(ui.msg == "yes", 0, 1))
}
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(loops = 2)
ride.status <- obstacle.uifun()
} else{
ride.normal(loops = 1)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr, " you completed the ride."),
paste0(msgstr, " you canceled your ride."))
endride.uifun(msgstr)
return(NULL)
}
}
ride <- function(ride.seq, o.seq){
grid.newpage()
ride.finished <- 0
ride.status <- 1
while(ride.status > 1){
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle()
ride.status <- obstacle.uifun()
} else{
ride.normal()
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" you completed your ride :)"),
paste0(msgstr,
" you canceled your ride without finishing ;]"))
endride.uifun(msgstr)
return(NULL)
}
}
}
}
ride()
ride(ride.seq, o.seq)
while(ride.status > 1){
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle()
ride.status <- obstacle.uifun()
} else{
ride.normal()
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" you completed the ride :)"),
paste0(msgstr,
" you had to cancel the ride ;]"))
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
while(ride.status > 1){
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle()
ride.status <- obstacle.uifun()
} else{
ride.normal()
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" you completed the ride :)"),
paste0(msgstr,
" you had to cancel the ride ;]"))
endride.uifun(msgstr)
return(NULL)
}
}
}
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
while(ride.status > 1){
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle()
ride.status <- obstacle.uifun()
} else{
ride.normal()
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" you completed the ride!!"),
paste0(msgstr,
" you had to cancel the ride."))
endride.uifun(msgstr)
return(NULL)
}
}
}
o.seq
ride.seq
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
while(ride.status > 0){
for(c in ride.seq){
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle()
ride.status <- obstacle.uifun()
} else{
ride.normal()
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" you completed the ride!!"),
paste0(msgstr,
" you had to cancel the ride."))
endride.uifun(msgstr)
return(NULL)
}
}
}
ride.normal <- function(alabel = "ride: normal", msgperc,
framevector = fv.drive, ssint = 0.1, loops = 1){
grid.newpage()
c = 1
while(c <= loops){
for(f in framevector){
framewithlabel <- paste0(c(msgperc, alabel, f),
collapse = "\n")
grid.newpage()
grid.text(framewithlabel)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride.obstacle <- function(alabel = "ride: obstacle!", msgperc,
framevector1 = fv.drive,
framevector2 = fv.obstacle,
ssint = 0.5, loops = 2){
grid.newpage()
c = 1
while(c <= loops){
for(i in 1:length(framevector1)){
grid.newpage()
# print ride animation
fs <- framevector1[i]
frame1 <- paste0(c(msgperc, alabel, fs),
collapse = "\n")
grid.text(frame1)
# print obstacle animation
fo <- framevector2[i]
frame2 <- paste0(c(" ", fo),
collapse = "\n")
grid.text(frame2)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride <- function(ride.seq, o.seq){
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" you completed the ride!!"),
paste0(msgstr,
" you had to cancel the ride."))
endride.uifun(msgstr)
return(NULL)
}
}
}
}
ride(ride.seq, o.seq)
ride.normal <- function(alabel = "ride: normal", msgperc,
framevector = fv.drive, ssint = 0.1, loops = 1){
grid.newpage()
c = 1
while(c <= loops){
for(f in framevector){
framewithlabel <- paste0(c(alabel, f, msgperc),
collapse = "\n")
grid.newpage()
grid.text(framewithlabel)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride.obstacle <- function(alabel = "ride: obstacle!", msgperc,
framevector1 = fv.drive,
framevector2 = fv.obstacle,
ssint = 0.5, loops = 2){
grid.newpage()
c = 1
while(c <= loops){
for(i in 1:length(framevector1)){
grid.newpage()
# print ride animation
fs <- framevector1[i]
frame1 <- paste0(c(alabel, fs, msgperc),
collapse = "\n")
grid.text(frame1)
# print obstacle animation
fo <- framevector2[i]
frame2 <- paste0(c(" ", fo),
collapse = "\n")
grid.text(frame2)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride <- function(ride.seq, o.seq){
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" you completed the ride!!"),
paste0(msgstr,
" you had to cancel the ride."))
endride.uifun(msgstr)
return(NULL)
}
}
}
}
ride.dur <- 100
ride.seq <- seq(1, ride.dur, 1)
# get obstacle data
max.o <- 10
o.num <- sample(max.o, 1)
o.seq <- sample(ride.seq, o.num)
# ride function
obstacle.uifun <- function(){
ui.msg <- dlg_message("cancel ride?", "yesno")$res
return(ifelse(ui.msg == "yes", 0, 1))
}
endride.uifun <- function(msgstr){
ui.msg <- dlg_message(msgstr, "ok")
}
ride.normal <- function(alabel = "ride: normal", msgperc,
framevector = fv.drive, ssint = 0.1, loops = 1){
grid.newpage()
c = 1
while(c <= loops){
for(f in framevector){
framewithlabel <- paste0(c(alabel, f, msgperc),
collapse = "\n")
grid.newpage()
grid.text(framewithlabel)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride.obstacle <- function(alabel = "ride: obstacle!", msgperc,
framevector1 = fv.drive,
framevector2 = fv.obstacle,
ssint = 0.5, loops = 2){
grid.newpage()
c = 1
while(c <= loops){
for(i in 1:length(framevector1)){
grid.newpage()
# print ride animation
fs <- framevector1[i]
frame1 <- paste0(c(alabel, fs, msgperc),
collapse = "\n")
grid.text(frame1)
# print obstacle animation
fo <- framevector2[i]
frame2 <- paste0(c(" ", fo),
collapse = "\n")
grid.text(frame2)
Sys.sleep(ssint)
}
c = c + 1
}
}
ride <- function(ride.seq, o.seq){
grid.newpage()
# baseline stats for ride
ride.finished <- 0; ride.status <- 1
perc.finished <- 0
while(ride.status > 0){
for(c in ride.seq){
perc.finished <- 100*(c/length(ride.seq))
msgperc <- paste0("ride progress: ", perc.finished, "%")
ride.finished <- ifelse(c == max(ride.seq),
1, 0)
if(c %in% o.seq){
ride.obstacle(msgperc = msgperc)
ride.status <- obstacle.uifun()
} else{
ride.normal(msgperc = msgperc)
}
if(ride.status == 0){
msgstr <- "ride over!"
msgstr <- ifelse(ride.finished == 1,
paste0(msgstr,
" you completed the ride!!"),
paste0(msgstr,
" you had to cancel the ride."))
endride.uifun(msgstr)
return(NULL)
}
}
}
}
ride(ride.seq, o.seq)
ride(ride.seq, o.seq)
rt <- "short" # short, medium, long
ride.type <- rt
ride.dur <- ifelse(rt == "short", 30, ifelse(rt == "medium", 50, ifelse(rt == "long", 100, "NA")))
ride.dur
?dlg_message
setwd("~/GitHub/scootsim")
labtag <- "mode: "
lab.idle <- "idle"
lab.maintenance <- "maintenance"
lab.inspect <- "inspect"
lab.drive <- "driving"
# obstacle data
osym <- "#"
otop <- paste0(rep(" ", 7), collapse = "")
omid <- paste0(rep(" ", 7), collapse = "")
o1 <- paste0(c(otop, omid, c("      ", osym)), collapse = "\n")
o2 <- paste0(c(otop, omid, c("    ", osym, " ")), collapse = "\n")
o3 <- paste0(c(otop, omid, c("     ", osym, " ")), collapse = "\n")
o4 <- paste0(c(otop, omid, c("    ", osym, "  ")), collapse = "\n")
fv.obstacle <- c(o1, o2, o3, o4)
for(i in seq(1, 10, 1)){
for(f in fv){
grid.newpage()
grid.text(f)
Sys.sleep(0.2)
}
}
sleepint <- 0.1
#--------
# bike ani data
#--------
stationary <- c("_______\n  =__% \n__0 0__")
blink <- c("_______\n       \n__   __")
fv.idle <- c(stationary, blink)
drive1 <- c("     **\n `=__% \n__O o_-")
drive2 <- c("   ** *\n`=__%  \n__o O__")
drive3 <- c("***     \n `=__% \n_-o o__")
drive4 <- c("       \n `=__% \n-_0 0__")
fv.drive <- c(drive1, drive2, drive3, drive4)
#----------
# scenes data
#---------
fv <- c(drive1, drive2, drive3, drive4)
s.drive <- scene(fv)
fv <- c(stationary, blink)
s.idle <- scene(fv)
sl.idle <- scene.withlabel(lab.idle, fv.idle, loops = 10)
sl.drive <- scene.withlabel(lab.drive, fv.drive, loops = 10)
